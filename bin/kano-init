#!/usr/bin/env python
#
# kano-init
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Create new users and initialise the OS for them.
#

"""
kano-init can create new users and initialise the OS for them.

Usage:
  kano-init schedule (reset|add-user)
  kano-init schedule delete-user [<name>]
  kano-init finalise
  kano-init status
  kano-init reset [-f]
  kano-init boot

Options:
  -h, --help       Show this message.
  -v, --version    Print the version of the updater.
  -f, --force      Force resetting of the kit.
"""

import os
import sys

import docopt

from kano.utils import enforce_root
from kano.logging import logger

from kano_init.status import Status, StatusError
from kano_init.tasks.add_user import do_add_user, schedule_add_user
from kano_init.tasks.delete_user import do_delete_user, schedule_delete_user
from kano_init.tasks.reset import do_reset, schedule_reset
from kano_init.tasks.flow import do_username_stage, do_white_rabbit_stage, \
    do_lightup_stage, do_switch_stage, do_speak_stage, do_letters_stage,  \
    do_picture_stage, do_stole_stage, do_final_stage
from kano_init.utils import reconfigure_autostart_policy, load_init_conf
from kano_init.terminal import set_control

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)
    else:
        locale_path = None


def main():
    msg = 'ERROR: Administrator priviledges are required to ' + \
          'perform this operation'
    enforce_root(msg)

    # TODO: put the version somewhere nicer
    version = 2.0
    args = docopt.docopt(__doc__, version=str(version))

    if args['boot']:
        status = Status.get_instance()

        flow_params = load_init_conf()

        # Disable terminal control characters
        set_control(False)

        while True:
            if status.stage == Status.ADD_USER_STAGE:
                do_add_user()
            elif status.stage == Status.DELETE_USER_STAGE:
                do_delete_user()
            elif status.stage == Status.RESET_STAGE:
                do_reset()
            elif status.stage == Status.USERNAME_STAGE:
                do_username_stage(flow_params)
            elif status.stage == Status.WHITE_RABBIT_STAGE:
                do_white_rabbit_stage(flow_params)
            elif status.stage == Status.LIGHTUP_STAGE:
                do_lightup_stage(flow_params)
            elif status.stage == Status.SWITCH_STAGE:
                do_switch_stage(flow_params)
            elif status.stage == Status.SPEAK_STAGE:
                do_speak_stage(flow_params)
            elif status.stage == Status.LETTERS_STAGE:
                do_letters_stage(flow_params)
            elif status.stage == Status.PICTURE_STAGE:
                do_picture_stage(flow_params)
            elif status.stage == Status.STOLE_STAGE:
                do_stole_stage(flow_params)
            elif status.stage == Status.FINAL_STAGE:
                do_final_stage(flow_params)
            else:
                break
    elif args['schedule']:
        try:
            if args['reset']:
                schedule_reset()
            elif args['add-user']:
                schedule_add_user()
            elif args['delete-user']:
                schedule_delete_user(args['<name>'])
        except StatusError as e:
            msg = "ERROR: {}".format(str(e))
            logger.error(msg)
            sys.exit(msg)
    elif args['finalise']:
        # This is called from kano-uixinit in kano-desktop to notify
        # that the initflow has been completed and the kit can be
        # switched to multiuser mode.
        logger.info('kano-init finalise called')
        status = Status.get_instance()
        if status.stage == Status.UI_INIT_STAGE:
            reconfigure_autostart_policy()

            status.stage = Status.DISABLED_STAGE
            status.username = None
            status.save()
        else:
            logger.warn('kano-init finalise called from the wrong stage ' +
                        status.stage)
            return 1
    elif args['status']:
        status = Status.get_instance()
        print status.stage
    elif args['reset']:
        if args['--force']:
            # force into the disabled stage so we can schedule reset
            status = Status.get_instance()
            status.stage = Status.DISABLED_STAGE
            status.username = None
            status.save()

        try:
            schedule_reset()
        except StatusError as e:
            msg = "ERROR: {}".format(str(e))
            logger.error(msg)
            sys.exit(msg)

    return 0

if __name__ == '__main__':
    sys.exit(main())
