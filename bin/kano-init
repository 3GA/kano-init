#! /usr/bin/python
#
# kano-init
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Create new users and initialise the OS for them.
#

"""
kano-init can create new users and initialise the OS for them.

Usage:
  kano-init schedule (reset|add-user)
  kano-init schedule delete-user [<name>]
  kano-init finalise [-f]
  kano-init status
  kano-init reset [-f]
  kano-init create-temp-user [-x]
  kano-init rename-user <current> <new>
  kano-init xserver-start <username>
  kano-init boot
  kano-init test [<stage>]

Options:
  -h, --help       Show this message.
  -v, --version    Print the version of the updater.
  -f, --force      Force resetting of the kit.
  -x, --xserver    Start the xserver as the new user
"""

import os
import sys
import random
from collections import OrderedDict

import docopt

from kano.utils import enforce_root
from kano_init.utils import set_ldm_autologin, start_lightdm
from kano_init.user import create_temporary_user, rename_user
from kano.logging import logger

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(0, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('kano-init', LOCALE_PATH)

from kano_init.status import Status, StatusError
from kano_init.tasks.add_user import do_add_user, schedule_add_user
from kano_init.tasks.delete_user import do_delete_user, schedule_delete_user
from kano_init.tasks.reset import do_reset, schedule_reset
from kano_init.tasks.flow import do_username_stage, do_white_rabbit_stage, \
    do_lightup_stage, do_switch_stage, do_letters_stage,  \
    do_love_stage, do_final_stage
from kano_init.utils import reconfigure_autostart_policy, load_init_conf
from kano_init.terminal import set_control
import locale



def main():
    # Set LC_ALL otherwise curses won't display utf8 strings properly.
    # Must be done before any curses init.
    locale.setlocale(locale.LC_ALL, '')

    msg = _('ERROR: Administrator priviledges are required to'
            ' perform this operation.')
    enforce_root(msg.encode('utf8'))

    # TODO: put the version somewhere nicer
    version = 2.0
    args = docopt.docopt(__doc__, version=str(version))

    func_table = OrderedDict([
        (Status.ADD_USER_STAGE,      do_add_user),
        (Status.DELETE_USER_STAGE,   do_delete_user),
        (Status.RESET_STAGE,         do_reset),
        (Status.USERNAME_STAGE,      do_username_stage),
        (Status.LIGHTUP_STAGE,       do_lightup_stage),
        (Status.SWITCH_STAGE,        do_switch_stage),
        (Status.LETTERS_STAGE,       do_letters_stage),
        (Status.WHITE_RABBIT_STAGE,  do_white_rabbit_stage),
        (Status.LOVE_STAGE,          do_love_stage),
        (Status.FINAL_STAGE,         do_final_stage)
    ])

    if args['boot']:
        status = Status.get_instance()

        flow_params = load_init_conf()

        # Disable terminal control characters
        set_control(False)

        while True:
            if status.stage in func_table:
                func_table[status.stage](flow_params)
            else:
                break
    elif args['test']:
        flow_params = load_init_conf()
        if args['<stage>']:
            if args['<stage>'] in func_table:
                status = Status.get_instance()
                status.username = os.environ['SUDO_USER']
                func_table[args['<stage>']](flow_params)
            else:
                print "Unknown stage."
        else:
            keylist = [k for k in func_table]
            for k in keylist[keylist.index(Status.USERNAME_STAGE):keylist.index(Status.LOVE_STAGE)]:
                print(k)
                func_table[k](flow_params)

    elif args['schedule']:
        try:
            if args['reset']:
                schedule_reset()
            elif args['add-user']:
                schedule_add_user()
            elif args['delete-user']:
                schedule_delete_user(args['<name>'])
        except StatusError as e:
            msg = N_(u"ERROR: {string_error}").format(string_error=e)
            logger.error(msg)
            sys.exit(_(msg).encode('utf8'))
    elif args['finalise']:
        # This is called from kano-uixinit in kano-desktop to notify
        # that the initflow has been completed and the kit can be
        # switched to multiuser mode.
        logger.info('kano-init finalise called')
        status = Status.get_instance()
        if status.stage == Status.UI_INIT_STAGE or args['--force']:
            reconfigure_autostart_policy()

            status.stage = Status.DISABLED_STAGE
            status.username = None
            status.save()
        else:
            logger.warn('kano-init finalise called from the wrong stage ' +
                        status.stage)
            return 1
    elif args['status']:
        status = Status.get_instance()
        print status.stage
    elif args['reset']:
        if args['--force']:
            # force into the disabled stage so we can schedule reset
            status = Status.get_instance()
            status.stage = Status.DISABLED_STAGE
            status.username = None
            status.save()

        try:
            schedule_reset()
        except StatusError as e:
            msg = N_(u"ERROR: {string_error}").format(string_error=e)
            logger.error(msg)
            sys.exit(_(msg))

    elif args['create-temp-user']:
        # Create a temporary kano user, optionally start Xserver and log him in
        username=create_temporary_user()
        if not username:
            sys.exit(1)
        else:
            print username
            if args['--xserver']:
                set_ldm_autologin(username)
                start_lightdm()

    elif args['rename-user']:
        # Rename "current" username to "new".
        try:
            rename_user(args['<current>'], args['<new>'])
        except:
            raise
            sys.exit(1)

    elif args['xserver-start']:
        # Starts the X server in the background and logs in as username
        set_ldm_autologin(args['<username>'])
        start_lightdm()


    return 0

if __name__ == '__main__':
    sys.exit(main())
