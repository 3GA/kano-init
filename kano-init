#!/bin/bash

# kano-init
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# A fun console script to set up Kanux
# 1) User name
# 2) User email
# 3) White rabbit riddle
# 4) Startx
# 9) Reset
#

function usage
{
    echo "Usage: kano-init [stage|reset]"
    echo ""
    echo "    stage     The stage to start the init procedure from."
    echo "              Values from 1 to 5 are supported."
    echo ""
    echo "    reset     Reset the kano-kit to it's initial state."
    echo ""

    exit "$1"
}

function clean_stdin()
{
    read -t 1 -n 10000 discard
}

function linebreak
{
    echo -ne "\n"
}

function set_autologin_console
{
    sed -r -i.bak "s|^(1:2345:respawn:/sbin/getty).+|\1 -n -o'-f $1' 38400 tty1|" /etc/inittab
    init q
}

function disable_autologin_console
{
    sed -r -i.bak "s|^(1:2345:respawn:/sbin/getty).+|\1 38400 tty1|" /etc/inittab
    init q
}

function set_autologin_gui
{
    # Set autologin in lightdm
    /usr/lib/arm-linux-gnueabihf/lightdm/lightdm-set-defaults --autologin "$1"
}

function disable_autologin_gui
{
    sed -i.bak '/^autologin-user/d' /etc/lightdm/lightdm.conf
}

function enable_lxde_autostart
{
    # Enable the lightdm service
    update-rc.d lightdm enable 2 >/dev/null 2>/dev/null
}

function disable_lxde_autostart
{
    # Disable the lightdm service
    update-rc.d lightdm disable 2 >/dev/null 2>/dev/null
}

function set_autostart_stage
{
    sed -i "s/^\(STAGE\=\)[0-9]$/\1$1/" /etc/profile.d/autostart-kano-init.sh
}

function get_option
{
    while true; do
        clean_stdin
        read -p "Your choice: " -e option
        eval "$1=\"$option\""
        if [ -z "$option" ]; then
            typewriter_echo "You need to choose one option. Which one do you pick:" 0 1 1 1
        elif [ -z "`grep "^[123]$" <<<"$option"`" ]; then
            typewriter_echo "The options are 1, 2, or 3. Which one do you pick:" 0 1 1 1
        else
            break
        fi
    done
}

# params:
#   $1: Number of characters to use to pad
function add_character_padding
{
    string=""
    for (( i=0; i<=$1 ; i++ )); do
        string+=" "
    done
    echo "${string}"
}

# new user kano-init setup
function newuser
{
    set_autologin_console "root"
    set_autostart_stage 1
    disable_lxde_autostart
    echo "kano-init scheduled for the next system reboot"
}

# setting up single-user / multiple-user mode
function singlemulti 
{
    number_of_users=`kano-usertools number`

    if [ $number_of_users -eq 0 ]; then
        newuser

    elif [ $number_of_users -eq 1 ]; then
        username=`kano-usertools firstuser`
        set_autologin_console "$username"
        set_autologin_gui "$username"
        enable_lxde_autostart

    else
        disable_autologin_console
        disable_autologin_gui
        enable_lxde_autostart
fi
}

# start
# Check for root priviledges.
if [ `id -u` -ne 0 ]; then
    echo "Error: kano-init must be executed with root privileges" 1>&2
    exit 1
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage 0
fi

# Get the resources directory
if [ -d "ascii_art" ]; then
    res_dir="."
else
    res_dir="/usr/share/kano-init/"
fi

# add new user mode
if [ "$1" == "newuser" ]; then
    newuser
    exit 0
fi

# single-multi user autoconfig
if [ "$1" == "singlemulti" ]; then
    singlemulti
    exit 0
fi

# reset: delete all users and trigger init
if [ "$1" == "reset" ]; then
    set_autologin_console "root"
    set_autostart_stage 9
    disable_lxde_autostart
    echo "kano-init RESET scheduled for the next system reboot"
    exit 0
fi

# Disable Ctrl+C and Ctrl+D in the console
stty intr undef
stty eof '?'

# checking parameters
stage=1
if [ -n "$1" ]; then
    if [ -n "`grep [12349] <<<"$1"`" ]; then
        stage="$1"
    else
        echo "Error: Unknown parameter '$1'"
        exit 1
    fi
fi

clear
sleep 1

whitespace=`add_character_padding 3`

# reset
if [ "$stage" -eq 9 ]; then
    kano-usertools deleteallusers
    set_autostart_stage 1
    stage=1
fi

if [ `kano-usertools testname` -eq 0 ]; then
    set_autostart_stage 1
    stage=1
fi

# [Stage 1] Name: Request user name and create user
if [ "$stage" -le 1 ] && [ `kano-usertools testname` -ne 1 ]; then
    typewriter_echo "Hello!" 0 1 1 1 1
    typewriter_echo "I'm KANO. Thanks for bringing me to life." 0.5 2 0 1
    typewriter_echo "What should I call you?" 0 1 0 1

    # Read the username
    while true; do
        clean_stdin
        read -p "Your name: " -e username

        # username empty
        if [ -z "$username" ]; then
            typewriter_echo "Type a cool name." 0 1 1 1
        # invalid characters    
        elif [ -z "`grep "^[a-zA-Z0-9]\+$" <<<"$username"`" ]; then
            typewriter_echo "Just one word, letters or numbers! Try again." 0 1 1 1
        # already taken    
        elif [ -n "`grep "^$username\:" /etc/passwd`" ]; then
            typewriter_echo "This one is already taken! Try again." 0 1 1 1
        # too long
        elif [ ${#username} -gt 25 ]; then
             typewriter_echo "This one is too long by "`expr ${#username} - 25`" characters! Try again." 0 1 1 1
        # OK     
        else
            break
        fi
    done
    # save username to temp file
    `kano-usertools savename $username`

    set_autostart_stage 2
else
    username=`kano-usertools loadname`
    typewriter_echo "Where was I $username? All right, I remember!" 0.5 1 1 0 1
fi

# [Stage 2] Email: Request user email and store it temporarily
if [ "$stage" -le 2 ]; then
    # Read the email
    linebreak
    typewriter_echo "Want to save your badges and games? Type your email address." 0 1 1 1
    typewriter_echo "Or just press [ENTER] to continue." 0 2 0 1
    while true; do
        clean_stdin
        read -p "Your email: " -e email
        if [ -z "$email" ]; then
            break
        elif [ -z "`egrep "[a-zA-Z0-9_\.-]+@[a-zA-Z0-9_.-]+\.[a-zA-Z0-9_.-]" <<<"$email"`" ]; then
            linebreak
            typewriter_echo "That doesn't look like a valid email address." 0 1 1 1
            typewriter_echo "Try again or just press [ENTER] to continue." 0 2 0 1
        else
            # save email to temp file
            `kano-usertools saveemail $email`
            typewriter_echo "Thank you!" 2 0 1
            break
        fi
    done
    clear
    set_autostart_stage 3
fi

# [Stage 3] Riddle: White rabbit riddle
numFails=0
if [ "$stage" -le 3 ]; then
    echo -ne "\n"
    typewriter_echo "$username, follow the white rabbit... " 0.5 1 1 1 1
    typewriter_echo "He's hiding somewhere on the computer. Can you find him?" 0 2 0 1

    while true; do
        typewriter_echo "Pick a type [1-3]:" 0.1 1 0 1
        typewriter_echo "  1) Animal" 0.1 1 0 1
        typewriter_echo "  2) Plant" 0.1 1 0 1
        typewriter_echo "  3) Machine" 0.1 2 0 1
        get_option "picked_type"
        linebreak

        typewriter_echo "Pick a size [1-3]:" 0.1 1 1 1
        typewriter_echo "  1) Big" 0.1 1 0 1
        typewriter_echo "  2) Medium" 0.1 1 0 1
        typewriter_echo "  3) Small" 0.1 2 0 1
        get_option "picked_size"
        linebreak

        ascii_art_dir="$res_dir/ascii_art"
        case "$picked_type$picked_size" in
            11) cat "$ascii_art_dir/elephant.txt" ;;
            12) cat "$ascii_art_dir/human.txt" ;;
            13) cat "$ascii_art_dir/rabbit.txt" ;;
            21) cat "$ascii_art_dir/tree.txt" ;;
            22) cat "$ascii_art_dir/potato-head.txt" ;;
            23) cat "$ascii_art_dir/flower.txt" ;;
            31) cat "$ascii_art_dir/car.txt" ;;
            32) cat "$ascii_art_dir/robot.txt" ;;
            33) cat "$ascii_art_dir/chip.txt" ;;
        esac
        linebreak

        if [ "$picked_type$picked_size" -eq 13 ]; then
            typewriter_echo "You win..." 0.5 2 1
            break
        else
            numFails=$(($numFails+1))
            case "$numFails" in
                1) typewriter_echo "Computers rule! Follow the white... what was it again?" 0.5 3 1 1 ;;
                2) typewriter_echo "I'll give you another hint, it's got big ears..." 0.5 3 1 1 ;;
                *) typewriter_echo "It's a small animal, I think..." 0.5 3 1 1 ;;
            esac
        fi
    done

    typewriter_echo "I'm good at remembering and combining things." 0.5 1 1 1
    typewriter_echo "But, I need humans to help me make new things." 1 2

    clear

    set_autostart_stage 4
fi

# creating user
kano-usertools createuser
if [ $? -ne 0 ]; then
    echo "Something happened with user creation"
    exit 1
fi

# disable kano-init
set_autostart_stage 0

# startx
if [ "$stage" -le 4 ]; then
    typewriter_echo "  Uhoh..." 2 0 1 0 1
    while true; do
        python -B $res_dir/bomb.py "$username"
        rv=$?

        clear
        if [ $rv -ne 0 ]; then
            sleep 1
            typewriter_echo "Try again!" 2 0 1 0 1
        else
            break
        fi
    done
fi

# setting up single-multi user
singlemulti

# disabling Ctrl keys
stty intr ^C
stty eof ^D

# Start LXDE
service lightdm start
